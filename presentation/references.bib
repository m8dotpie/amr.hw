@article{casalinoRTRealtimeRaytracing2011,
  title = {{{RT}} 2: {{Real-time}} Ray-Tracing for Underwater Range Evaluation},
  shorttitle = {{{RT}} 2},
  author = {Casalino, Giuseppe and Caiti, Andrea and Turetta, Alessio and Simetti, Enrico},
  year = {2011},
  month = oct,
  journal = {Intell. Serv. Robot.},
  volume = {4},
  pages = {259--270},
  doi = {10.1007/s11370-011-0093-8},
  abstract = {The paper deals with the distributed acoustic localization of teams of autonomous underwater vehicles (AUVs) and proposes a novel algorithm, real-time ray-tracing (RT2), for evaluating the distance between any pair of AUVs in the team. The technique, based on a modified formulation of the non-linear sound-ray propagation laws, allows efficient handling of the distorted and reflected acoustic ray paths. The proposed algorithm can be easily implemented on-board of low-cost AUVs, requiring the presence, on each vehicle, of an acoustic modem and a pair of look-up tables, a-priori built on the basis of the assumed knowledge of the depth-dependent sound velocity profile. On such a basis, every AUV can compute its distance w.r.t. to any other neighbor team member, through time-of-flight measurements and the exchanges of depth information only. KeywordsMarine systems\textendash Communication control applications and systems\textendash Estimation algorithms and theory\textendash Localization systems\textendash Navigation systems\textendash Motion estimation\textendash Autonomous vehicles},
  file = {/Users/m8dotpie/Zotero/storage/GA3VYLI8/Casalino et al. - 2011 - RT 2 Real-time ray-tracing for underwater range e.pdf}
}

@inproceedings{evenAudioRayTracing2014,
  title = {Audio Ray Tracing for Position Estimation of Entities in Blind Regions},
  booktitle = {2014 {{IEEE}}/{{RSJ International Conference}} on {{Intelligent Robots}} and {{Systems}}},
  author = {Even, Jani and Morales, Yoichi and Kallakuri, Nagasrikanth and Ishi, Carlos and Hagita, Norihiro},
  year = {2014},
  month = sep,
  pages = {1920--1925},
  issn = {2153-0866},
  doi = {10.1109/IROS.2014.6942816},
  abstract = {This paper presents a framework for making a mobile robot aware of an entity in the blind region of its laser range finders when that entity emits sound. First in a mapping stage, a 3D description of the environment that contains information about acoustic reflection is created. Then during operation, the robot combines estimated directions of arrival of sound with this 3D description to detect entities that are not visible by line of sight sensors but could be heard because of sound reflections. Using this approach, it is possible to restrict the hypothesis about the position of a sound emitting entity in the blind region to a small set of candidate depth values.},
  keywords = {Arrays,Direction-of-arrival estimation,Histograms,Microphones,Ray tracing,Robots,Three-dimensional displays},
  file = {/Users/m8dotpie/Zotero/storage/QYZ7YIU2/6942816.html}
}

@article{felsnerRoboticCoveragePath2021,
  title = {Robotic {{Coverage Path Planning}} for {{Ultrasonic Inspection}}},
  author = {Felsner, Kastor and Schlachter, Klaus and Zambal, Sebastian},
  year = {2021},
  month = jan,
  journal = {Applied Sciences},
  volume = {11},
  number = {22},
  pages = {10512},
  publisher = {{Multidisciplinary Digital Publishing Institute}},
  issn = {2076-3417},
  doi = {10.3390/app112210512},
  urldate = {2023-03-16},
  abstract = {Automatic robotic inspection of arbitrary free-form shapes is relevant for many quality control applications in different industries. We propose a method for planning the motion of an industrial robot to perform ultrasonic inspection of varying 3D shapes. Our method starts with the calculation of a set of sub-paths. These sub-paths are derived from streamlines. The underlying vector field is deduced from local curvature of the inspected geometry. Intermediate robot motions are planned to connect individual sub-paths to obtain a single complete inspection path. Coverage is calculated via ray tracing to simulate the propagation of ultrasound signals. This simulation enables the algorithm to proceed adaptively and to find a good trade-off between path length and coverage. We report experiments for four different geometries. The results indicate that shorter paths are achieved by using ray tracing for adaptive adjustment of streamline density. Our algorithm is tailored to ultrasonic inspection. However, the main concept of exploiting local surface curvature and streamlines for coverage path planning generalizes to other robotic inspection problems.},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  langid = {english},
  keywords = {coverage path planning,principal curvature,robotic inspection,streamline,ultrasonic inspection},
  file = {/Users/m8dotpie/Zotero/storage/54VYNUSE/Felsner et al. - 2021 - Robotic Coverage Path Planning for Ultrasonic Insp.pdf}
}

@article{kimSimpleGlobalPath2018,
  title = {Simple {{Global Path Planning Algorithm Using}} a {{Ray-Casting}} and {{Tracking Method}}},
  author = {Kim, In-Seok and Lee, Woong-Ki and Hong, Young-Dae},
  year = {2018},
  month = may,
  journal = {Journal of Intelligent \& Robotic Systems},
  volume = {90},
  number = {1},
  pages = {101--111},
  issn = {1573-0409},
  doi = {10.1007/s10846-017-0642-2},
  urldate = {2023-03-16},
  abstract = {This paper proposes a simple global path planning algorithm using a ray's feature of straight in nature with a random reflection model. The ray-casting and tracking (RCT) method is designed to solve global single-query path planning problems with fast convergence time. It is a random sampling-based algorithm that reflects rays with the maximum search length, which is a line of sight restricted only by the obstacles blocking the rays. RCT guarantees a competent path that follows an obstacle's edges like a path generated by a visibility graph (VG). We demonstrated RCT's superior performance in terms of both convergence time and path length on various environments that have their own features compared to other well-known path planning algorithms such as the A*, rapidly-exploring random trees, and VG.},
  langid = {english},
  keywords = {Navigation of mobile robots,Nondeterministic global path planning,Ray-casting and tracking,Sampling-based path planning}
}

@inproceedings{majekRangeSensorsSimulation2016,
  title = {Range {{Sensors Simulation Using GPU Ray Tracing}}},
  booktitle = {Proceedings of the 9th {{International Conference}} on {{Computer Recognition Systems CORES}} 2015},
  author = {Majek, Karol and Bedkowski, Janusz},
  editor = {Burduk, Robert and Jackowski, Konrad and Kurzy{\'n}ski, Marek and Wo{\'z}niak, Micha{\l} and {\.Z}o{\l}nierek, Andrzej},
  year = {2016},
  series = {Advances in {{Intelligent Systems}} and {{Computing}}},
  pages = {831--840},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-26227-7_78},
  abstract = {In this paper the GPU-accelerated range sensors simulation is discussed. Range sensors generate large amount of data per second and to simulate these high-performance simulation is needed. We propose to use parallel ray tracing on graphics processing units to improve the performance of range sensors simulation. The multiple range sensors are described and simulated using NVIDIA OptiX ray tracing engine. This work is focused on the performance of the GPU acceleration of range images simulation in complex environments. Proposed method is tested using several state-of-the-art ray tracing datasets. The software is publicly available as an open-source project SensorSimRT.},
  isbn = {978-3-319-26227-7},
  langid = {english},
  keywords = {Ray tracing,RGB-D sensors,Simulation}
}

@misc{peddieWhatDifferenceRay2016,
  title = {What's the {{Difference Between Ray Tracing}}, {{Ray Casting}}, and {{Ray Charles}}?},
  author = {Peddie, Jon},
  year = {2016},
  month = feb,
  journal = {Electronic Design},
  urldate = {2023-03-16},
  abstract = {And how does a cubist get into computer graphics?},
  howpublished = {https://www.electronicdesign.com/technologies/displays/article/21801219/whats-the-difference-between-ray-tracing-ray-casting-and-ray-charles},
  file = {/Users/m8dotpie/Zotero/storage/KJ36MFY2/whats-the-difference-between-ray-tracing-ray-casting-and-ray-charles.html}
}

@article{sauzeRaycastApproachCollision2010,
  title = {A {{Raycast Approach}} to {{Collision Avoidance}} in {{Sailing Robots}}},
  author = {Sauz{\'e}, Colin and Neal, Mark},
  year = {2010},
  month = jun,
  abstract = {This paper presents a simple mechanism for an autonomous sailing robot to detect when it is within close proximity to fixed obstacles and a reactive mechanism to avoid those obstacles. This is achieved by using a raster based map of the local area and raycasting from the boat's current position in order to determine the distance and heading to the nearest coastline. Once this is determined a new target heading which does not result in any immediate danger is computed. Simulations have shown that it is possible for a robot to sailing between a set of waypoints while avoiding obstacles placed between those waypoints. This method has been shown to be capable of selecting a sensible course and avoiding collisions in most cases, however when the robot becomes trapped in small inlets or between groups of tightly packed islands it can fail to find a suitable course.},
  file = {/Users/m8dotpie/Zotero/storage/5K56ZG3G/Sauz√© and Neal - 2010 - A Raycast Approach to Collision Avoidance in Saili.pdf}
}

@misc{stephanemassartIndustrialRobotSimulation2019,
  title = {Industrial Robot Simulation Ray Tracing},
  author = {{st\'ephane Massart}},
  year = {2019},
  urldate = {2023-03-16},
  abstract = {Virtual Universe Pro is the virtual commissioning solution without compromise: - realtime rendering using Unity 3d or Unreal Engine (using raytracing), - robots and "classic" automation systems simulation, - connection with many PLCs brands and models, simulation softwares (Eg. Siemens Plcsim) and robot programing software (Eg. Abb RobotStudio), - import from the main CAD softwares (Eg. Solidworks) or 3d files, - use of the main physic engines (Eg. Nvidia Physx V4). - industrial automation objects library including robots library, - afordable. www.iraifrance.com contact@irai.com}
}

@misc{walshCDDTFastApproximate2018,
  title = {{{CDDT}}: {{Fast Approximate 2D Ray Casting}} for {{Accelerated Localization}}},
  shorttitle = {{{CDDT}}},
  author = {Walsh, Corey and Karaman, Sertac},
  year = {2018},
  month = mar,
  number = {arXiv:1705.01167},
  eprint = {arXiv:1705.01167},
  publisher = {{arXiv}},
  urldate = {2023-03-16},
  abstract = {Localization is an essential component for autonomous robots. A well-established localization approach combines ray casting with a particle filter, leading to a computationally expensive algorithm that is difficult to run on resource-constrained mobile robots. We present a novel data structure called the Compressed Directional Distance Transform for accelerating ray casting in two dimensional occupancy grid maps. Our approach allows online map updates, and near constant time ray casting performance for a fixed size map, in contrast with other methods which exhibit poor worst case performance. Our experimental results show that the proposed algorithm approximates the performance characteristics of reading from a three dimensional lookup table of ray cast solutions while requiring two orders of magnitude less memory and precomputation. This results in a particle filter algorithm which can maintain 2500 particles with 61 ray casts per particle at 40Hz, using a single CPU thread onboard a mobile robot.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Data Structures and Algorithms,Computer Science - Robotics},
  file = {/Users/m8dotpie/Zotero/storage/GXKQX5MV/Walsh and Karaman - 2018 - CDDT Fast Approximate 2D Ray Casting for Accelera.pdf;/Users/m8dotpie/Zotero/storage/5G4Q4CD8/1705.html}
}
